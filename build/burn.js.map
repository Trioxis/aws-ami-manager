{"version":3,"sources":["../burn.js"],"names":["AWS","require","config","update","region","Promise","ec2","EC2","moment","burnAMI","resolve","reject","describeInstances","err","data","console","log","EC2_tags","listEC2","then","backup_instances_tags","filterTags","instance","parseInt","counter","params","InstanceId","details","id","Name","name_date","createImage","stack","deregisterAMI","expiry","describeImages","Owners","Images","map","includes","ImageId","deregisterImage","Instances","Array","current_time","format","Reservations","Tags","tag","Key","Value","Instance_set","Instance_name","find","o","name","concat","date","push","instances","AMI_burn_set","tagged_instance","AMI_pair","i","ami","uniqueArray","filter","element","initial_position","indexOf","registerAMI"],"mappings":"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","file":"burn.js","sourcesContent":["var AWS = require(\"aws-sdk\");\nAWS.config.update({region: 'ap-southeast-2'});\nvar Promise = require('es6-promise').Promise;\nvar ec2 = new AWS.EC2();\nvar moment = require(\"moment\");\n\nclass burnAMI{\n\n  constructor() {}\n\n  listEC2(){\n    return new Promise(function(resolve, reject){\n\n        ec2.describeInstances({}, function(err, data) {\n            if (err) {\n                reject(err);\n            } else {\n                console.log(data);\n                resolve(data);\n            }\n        });\n    });\n  }\n\n  getInstances(){\n      return new Promise(function(resolve, reject) {\n          var EC2_tags = listEC2().then(function(data){\n              var backup_instances_tags = filterTags(data);\n              resolve(backup_instances_tags);\n          })\n      });\n  }\n\n  registerAMI(instance) {\n\n    if(parseInt(instance.counter) <= 5)\n    {\n        var params = {\n          InstanceId : instance.details.id,\n          Name : instance.details.name_date\n        }\n          ec2.createImage(params, function(err, data) {\n            if (err) console.log(err, err.stack); // an error occurred\n                 console.log(data);           // successful response\n        });\n    }else{\n      console.log(\"deregister\");\n      deregisterAMI(instance);\n    }\n  }\n\n  deregisterAMI(expiry) {\n    return new Promise(function(resolve, reject){\n      ec2.describeImages(params={Owners:['791606823516']}, function(err, data) {\n            if (err) {\n                reject(err);\n            } else {\n                resolve(data);\n            }\n        });\n    }).then(function(data){\n      data.Images.map(function(instance){\n        if(instance.Name.includes(expiry.details.name_date)){\n          var params = {\n            ImageId : instance.ImageId\n          }\n          ec2.deregisterImage(params, function(err, data) {\n            if (err) console.log(err, err.stack); // an error occurred\n            else     console.log(data);           // successful response\n          })\n        }\n      })\n    })\n  }\n\n  filterTags(data){\n      Instances = new Array();\n      var current_time = new moment().format(\" YYYYMMDD\");\n      data.Reservations.map(function(instance){\n        instance.Instances[0].Tags.map(function(tag){\n            if(tag.Key == 'Backup' && tag.Value == 'True'){\n              Instance_set = {}\n              var Instance_name = instance.Instances[0].Tags.find(o => o.Key === 'Name')\n              Instance_set.id = instance.Instances[0].InstanceId;\n              Instance_set.name = Instance_name.Value;\n              Instance_set.name_date = Instance_name.Value.concat(current_time);\n              Instance_set.date = current_time;\n              Instances.push(Instance_set);\n            }\n          })\n      })\n      return Instances;\n  }\n\n  listAMIs(instances){\n    console.log(instances);\n    return new Promise(function(resolve, reject){\n      ec2.describeImages(params={Owners:['791606823516']}, function(err, data) {\n            if (err) {\n                reject(err);\n            } else {\n                resolve(data.Images);\n            }\n        });\n    }).then(function(data){\n      var AMI_burn_set = new Array();\n      instances.map(function(tagged_instance){\n        var AMI_pair = {};\n        var i=0;\n        AMI_pair.counter=0;\n        data.map(function(ami){\n          if(ami.Name.includes(tagged_instance.name)){ //when at least one burnt AMI exsiting then check the number\n            AMI_pair.details=tagged_instance;\n            AMI_pair.counter=++i;\n            AMI_burn_set.push(AMI_pair);\n          }else{ //when nothing exists\n            AMI_pair.details=tagged_instance;\n            AMI_burn_set.push(AMI_pair);\n          }\n        })\n      })\n\n      //check if the first position of this element in the array is equal to the current position\n      uniqueArray = AMI_burn_set.filter(function(element, initial_position) {\n         return AMI_burn_set.indexOf(element) == initial_position;\n      })\n      uniqueArray.map(function(instance){\n        if(parseInt(instance.counter) == 0){\n            console.log(\"-------------First AMI-------------\");\n            var params = {\n              InstanceId : instance.details.id,\n              Name : instance.details.name_date\n            }\n            ec2.createImage(params, function(err, data) {\n                console.log(data);           // successful response\n            });\n\n        }else{\n            console.log(\"-------------More than one AMI exisiting for the instance-------------\");\n            registerAMI(instance);\n        }\n      })\n    })\n  }\n}\n\n\nexport default burnAMI\n"]}