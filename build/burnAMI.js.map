{"version":3,"sources":["../burnAMI.js"],"names":["AWS","require","config","update","region","moment","limit","ec2","EC2","AMI_storage","Array","AMI","Promise","resolve","reject","Instance_set","Instances","describeInstances","err","response","current_time","format","ec2_list","Reservations","map","instanceResponse","Tags","instanceTags","Key","Value","Instance_name","find","o","id","InstanceId","name","name_date","concat","push","describeImages","Owners","data","Images","AMI_burn_set","AMI_pair","i","counter","ami","Name","includes","tagged_instance","details","uniqueArray","filter","element","initial_position","indexOf","instance","parseInt","params","createImage","console","log","stack","expired_instance","numberPattern","leastDate","replace","leastInstance","private_AMI","ImageId","deregisterImage"],"mappings":"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","file":"burnAMI.js","sourcesContent":["var AWS = require(\"aws-sdk\");\nAWS.config.update({region: 'ap-southeast-2'});\nvar moment = require(\"moment\");\nvar limit = 3;\nvar ec2 = new AWS.EC2();\nvar AMI_storage = new Array();\n'use strict'\n\nclass AMI{\n\n  constructor () {}\n\n  listEC2 () {\n    return new Promise((resolve, reject) => {\n      let Instance_set = {};\n      let Instances = new Array(); // Instance details\n      ec2.describeInstances({}, function(err, response) {\n              if (err) {\n                  reject(err);\n              } else {\n                  let current_time = new moment().format(\" YYYYMMDD\");\n                  let ec2_list = response.Reservations.map(instanceResponse =>{\n                      instanceResponse.Instances[0].Tags.map(instanceTags => {\n                         if(instanceTags.Key == 'Backup' && instanceTags.Value == 'True'){\n                           Instance_set = {};\n                           let Instance_name = instanceResponse.Instances[0].Tags.find( o => o.Key === 'Name');\n                           Instance_set.id = instanceResponse.Instances[0].InstanceId;\n                           Instance_set.name = Instance_name.Value;\n                           Instance_set.name_date = Instance_name.Value.concat(current_time);\n                           Instances.push(Instance_set);\n                         }\n                      })\n                      resolve(Instances);\n                  })\n              }\n      });\n    })\n  }\n\n  listAMIs() {\n    return new Promise((resolve, reject) => {\n        ec2.describeImages({Owners:['791606823516']}, function(err, data) {\n          if (err) {\n            reject(err);\n          } else {\n            resolve(data.Images);\n          }\n      });\n    })\n  }\n\n\n  countAMIs(data, Instances) {\n    let AMI_burn_set = new Array();\n      Instances.map(tagged_instance => {\n        let AMI_pair = {};\n        let i = 0;\n        AMI_pair.counter = 0;\n        data.map(ami =>{\n          if(ami.Name.includes(tagged_instance.name)){\n            AMI_pair.details=tagged_instance;\n            AMI_storage.push(ami);\n            AMI_pair.counter=++i;\n            AMI_burn_set.push(AMI_pair);\n          }else{\n            AMI_pair.details=tagged_instance;\n            AMI_burn_set.push(AMI_pair);\n          }\n        })\n      })\n\n      let uniqueArray = AMI_burn_set.filter(function(element, initial_position) {\n         return AMI_burn_set.indexOf(element) == initial_position;\n      })\n      return uniqueArray;\n    }\n\n\n\n  burn_or_not(instance) {\n    if(parseInt(instance.counter) <= limit)\n    {\n      return true;\n    }else{\n      return false;\n    }\n  }\n\n\n registerAMI(instance) {\n    var params = {\n      InstanceId : instance.details.id,\n      Name : instance.details.name_date\n    }\n    ec2.createImage(params, function(err, data) {\n      if (err) {\n        console.log(err, err.stack)\n      }  else{\n        console.log(data);\n        // return true;\n      }\n    });\n  }\n\n\n deregisterAMI(expired_instance) {\n  let numberPattern = /\\d+/g;\n\n  let leastDate = parseInt(AMI_storage[0].Name.replace(/\\D/g, ''));\n  let leastInstance = {};\n\n  AMI_storage.map(private_AMI => {\n    if(private_AMI.Name.includes(expired_instance.details.name)){\n      if(leastDate > parseInt(private_AMI.Name.replace(/\\D/g, ''))){\n        leastDate = parseInt(private_AMI.Name.replace(/\\D/g, ''));\n      }\n    }\n  });\n\n  AMI_storage.map(private_AMI => {\n    if(private_AMI.Name.includes(expired_instance.details.name)\n       && private_AMI.Name.includes(leastDate)){\n       console.log(private_AMI.Name);\n       var params = {\n         ImageId : private_AMI.ImageId\n       }\n       ec2.deregisterImage(params, function(err, data) {\n         if (err) console.log(err, err.stack); // an error occurred\n         else     console.log(data);           // successful response\n       })\n    }\n  });\n }\n\n\n}\n\nexport default AMI;\n"]}